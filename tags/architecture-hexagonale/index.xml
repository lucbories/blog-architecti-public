<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Architecture Hexagonale on ArchitecTI</title>
    <link>https://architecti.blog/tags/architecture-hexagonale/</link>
    <description>Recent content in Architecture Hexagonale on ArchitecTI</description>
    <generator>Hugo</generator>
    <language>fr</language>
    <lastBuildDate>Sun, 17 Aug 2025 21:07:39 -0400</lastBuildDate>
    <atom:link href="https://architecti.blog/tags/architecture-hexagonale/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Les Principes Fondamentaux du Domain-Driven Design (DDD)</title>
      <link>https://architecti.blog/articles/2025/008-les-principes-fondamentaux-du-domain-driven-design-ddd/</link>
      <pubDate>Sun, 17 Aug 2025 21:07:39 -0400</pubDate>
      <guid>https://architecti.blog/articles/2025/008-les-principes-fondamentaux-du-domain-driven-design-ddd/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;Dans un monde où les systèmes logiciels deviennent de plus en plus complexes, il est essentiel de concevoir des architectures qui reflètent fidèlement les besoins métier. C’est précisément l’objectif du &lt;strong&gt;Domain-Driven Design (DDD)&lt;/strong&gt;, une approche introduite par &lt;strong&gt;Eric Evans&lt;/strong&gt; en 2003, qui place le &lt;strong&gt;domaine métier&lt;/strong&gt; au cœur de la conception logicielle.&lt;/p&gt;&#xA;&lt;p&gt;Mais DDD n’est pas qu’une méthode de modélisation. C’est une philosophie qui influence profondément l’&lt;strong&gt;architecture applicative&lt;/strong&gt;, en guidant la structuration des composants, la définition des responsabilités, et la communication entre les parties du système.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
