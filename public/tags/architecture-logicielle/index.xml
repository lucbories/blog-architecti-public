<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Architecture Logicielle on Architecture TI</title>
    <link>https://architecti.blog/tags/architecture-logicielle/</link>
    <description>Recent content in Architecture Logicielle on Architecture TI</description>
    <generator>Hugo</generator>
    <language>fr-CA</language>
    <lastBuildDate>Tue, 05 Aug 2025 21:07:39 -0400</lastBuildDate>
    <atom:link href="https://architecti.blog/tags/architecture-logicielle/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Architecture Applicative - mise en contexte</title>
      <link>https://architecti.blog/posts/architecture-applicative---mise-en-contexte/</link>
      <pubDate>Tue, 05 Aug 2025 21:07:39 -0400</pubDate>
      <guid>https://architecti.blog/posts/architecture-applicative---mise-en-contexte/</guid>
      <description>&lt;h2 id=&#34;√™tes-vous-concern√©-par-larchitecture-applicative&#34;&gt;√ätes-vous concern√© par l‚ÄôArchitecture Applicative?&lt;/h2&gt;&#xA;&lt;p&gt;Si vous √™tes d√©veloppeur vous aimeriez comprendre comment les √©l√©ments applicatifs interagissent entre eux; comment doit fonctionner un traitement applicatif particulier, avec quels r√©sultats attendus; de quelle mani√®re un utilisateur doit utiliser un √©cran de saisie ou de consultation.&lt;/p&gt;&#xA;&lt;p&gt;Si vous √™tes sp√©cialiste infrastructure, vous avez besoin de conna√Ætre la nature et la volum√©trie des donn√©es stock√©es et √©chang√©es; la fr√©quence et la charge requise par chaque traitement applicatif; l‚Äôagencement des diff√©rentes solutions applicatives entre elles au sein du syst√®me d‚Äôinformation (SI).&lt;/p&gt;</description>
    </item>
    <item>
      <title>üß© Comprendre le Bounded Context en Architecture Microservices</title>
      <link>https://architecti.blog/posts/comprendre-le-bounded-context-en-architecture-microservices/</link>
      <pubDate>Tue, 05 Aug 2025 21:07:39 -0400</pubDate>
      <guid>https://architecti.blog/posts/comprendre-le-bounded-context-en-architecture-microservices/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;L‚Äôarchitecture microservices a r√©volutionn√© la mani√®re dont les syst√®mes logiciels sont con√ßus, d√©velopp√©s et maintenus. Elle repose sur le principe de d√©composer une application monolithique en une s√©rie de services ind√©pendants, chacun responsable d‚Äôun domaine fonctionnel bien d√©fini. Mais cette d√©composition soul√®ve une question cruciale : &lt;strong&gt;comment d√©finir les limites de chaque service ?&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;C‚Äôest l√† qu‚Äôintervient le concept de &lt;strong&gt;bounded context&lt;/strong&gt;, issu de la m√©thodologie &lt;strong&gt;Domain-Driven Design (DDD)&lt;/strong&gt;. Ce concept permet de structurer les microservices autour de mod√®les m√©tier coh√©rents, en √©vitant les ambigu√Øt√©s et les d√©pendances inutiles.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
